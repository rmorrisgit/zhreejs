import * as THREE from 'three';
import { MeshSurfaceSampler } from 'three/examples/jsm/math/MeshSurfaceSampler.js';

let scene, camera, renderer, plane, particleMesh;
const particlesCount = 1000;
const particles = new Float32Array(particlesCount * 3);

function init() {
    scene = new THREE.Scene();
    scene.background = new THREE.Color(0x87CEEB);

    camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    camera.position.set(0, 5, 20);
    camera.lookAt(0, 0, 0);

    renderer = new THREE.WebGLRenderer();
    renderer.setSize(window.innerWidth, window.innerHeight);
    document.body.appendChild(renderer.domElement);

    const planeGeometry = new THREE.PlaneGeometry(50, 50);
    const planeMaterial = new THREE.MeshBasicMaterial({ color: 0xAAAAAA, side: THREE.DoubleSide });
    plane = new THREE.Mesh(planeGeometry, planeMaterial);
    plane.rotation.x = -Math.PI / 2;
    scene.add(plane);

    const particleGeometry = new THREE.BufferGeometry();
    particleGeometry.setAttribute('position', new THREE.BufferAttribute(particles, 3));
    const particleMaterial = new THREE.PointsMaterial({ color: 0xFF0000, size: 0.5 });
    particleMesh = new THREE.Points(particleGeometry, particleMaterial);
    scene.add(particleMesh);

    initializeParticles();

    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
    scene.add(ambientLight);

    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.5);
    directionalLight.position.set(10, 10, 10);
    scene.add(directionalLight);

    window.addEventListener('resize', onWindowResize, false);

    animate();
}

function initializeParticles() {
  for (let i = 0; i < particlesCount; i++) {
      particles[i * 3] = Math.random() * 50 - 25;
      particles[i * 3 + 1] = Math.random() * 50 - 25;
      particles[i * 3 + 2] = Math.random() * 50 - 25;
  }
  particleMesh.geometry.attributes.position.needsUpdate = true;
}


function onWindowResize() {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
}
function animate() {
  requestAnimationFrame(animate);

  const time = Date.now() * 0.001;
  for (let i = 0; i < particlesCount; i++) {
      // Example: Use noise functions or complex patterns
      particles[i * 3] += Math.sin(time + i * 0.1) * 0.05;
      particles[i * 3 + 1] += Math.cos(time + i * 0.1) * 0.05;
      particles[i * 3 + 2] += Math.sin(time + i * 0.1) * 0.05;
  }
  particleMesh.geometry.attributes.position.needsUpdate = true;

  renderer.render(scene, camera);
}


init();
